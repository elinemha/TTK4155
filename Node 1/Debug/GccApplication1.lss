
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00000d6a  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001b8  008001b8  00000eb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e47  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001106  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001164  00000000  00000000  000040a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  0000520c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8f  00000000  00000000  00005e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e6       	ldi	r30, 0x6A	; 106
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3b       	cpi	r26, 0xB8	; 184
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 eb       	ldi	r26, 0xB8	; 184
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 3c       	cpi	r26, 0xC2	; 194
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 01 01 	call	0x202	; 0x202 <main>
  a6:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_config_clock>:

void ADC_clock(void)
{
	TCCR0 |= (1<<WGM01)|(1<<COM00)|(1<<CS00);
	DDRD |= (1<<DDD5);
	OCR0 = 0x04;
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	83 bf       	out	0x33, r24	; 51
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	83 bf       	out	0x33, r24	; 51
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	83 bf       	out	0x33, r24	; 51
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	83 bf       	out	0x33, r24	; 51
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	83 bf       	out	0x33, r24	; 51
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	83 bf       	out	0x33, r24	; 51
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	83 bf       	out	0x33, r24	; 51
  de:	11 be       	out	0x31, r1	; 49
  e0:	08 95       	ret

000000e2 <adc_init>:
  e2:	0e 94 57 00 	call	0xae	; 0xae <adc_config_clock>
  e6:	08 95       	ret

000000e8 <adc_read>:
  e8:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <__bss_end+0x123e>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	04 c0       	rjmp	.+8      	; 0xfa <adc_read+0x12>
  f2:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <__bss_end+0x123e>
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	48 2f       	mov	r20, r24
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	42 17       	cp	r20, r18
 100:	53 07       	cpc	r21, r19
 102:	bc f7       	brge	.-18     	; 0xf2 <adc_read+0xa>
 104:	89 2f       	mov	r24, r25
 106:	08 95       	ret

00000108 <ADC_read>:
}

uint8_t ADC_read()
{
	volatile char *ext_ram = (char *) 0x1400; // Start address for the SRAM
	return ext_ram[0];
 108:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x123e>
	//uint16_t ext_ram_size = 0x400;
	//for (uint16_t i = 0; i < ext_ram_size; i++) {
	//	uint8_t retreived_value = ext_ram[i]; }
}
 10c:	08 95       	ret

0000010e <SRAM_INIT>:
#include "basic_defs.h"


void SRAM_INIT(void)
{
	MCUCR |= (1<<SRE);
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	80 68       	ori	r24, 0x80	; 128
 112:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 114:	80 b7       	in	r24, 0x30	; 48
 116:	80 62       	ori	r24, 0x20	; 32
 118:	80 bf       	out	0x30, r24	; 48
 11a:	08 95       	ret

0000011c <can_init>:
 */ 
#include "can.h"

void can_init()
{
	mcp_init();
 11c:	0e 94 c7 01 	call	0x38e	; 0x38e <mcp_init>
	mcp2515_write(MCP_CANCTRL, MODE_NORMAL);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	uint8_t value = mcp2515_read(MCP_CANSTAT);
 128:	8e e0       	ldi	r24, 0x0E	; 14
 12a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_NORMAL ) {
 12e:	80 7e       	andi	r24, 0xE0	; 224
 130:	21 f0       	breq	.+8      	; 0x13a <can_init+0x1e>
		printf (" MCP2515 is NOT in normal mode!\n");
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 77 02 	call	0x4ee	; 0x4ee <puts>
 13a:	08 95       	ret

0000013c <canned>:
	}
}


void canned(can_message* cm)
{	
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
	mcp2515_write(TXB0SIDH, cm->id>>3);
 146:	fc 01       	movw	r30, r24
 148:	60 81       	ld	r22, Z
 14a:	71 81       	ldd	r23, Z+1	; 0x01
 14c:	76 95       	lsr	r23
 14e:	67 95       	ror	r22
 150:	76 95       	lsr	r23
 152:	67 95       	ror	r22
 154:	76 95       	lsr	r23
 156:	67 95       	ror	r22
 158:	81 e3       	ldi	r24, 0x31	; 49
 15a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	mcp2515_write(TXB0SIDL, cm->id<<5);
 15e:	f8 01       	movw	r30, r16
 160:	60 81       	ld	r22, Z
 162:	62 95       	swap	r22
 164:	66 0f       	add	r22, r22
 166:	60 7e       	andi	r22, 0xE0	; 224
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	mcp2515_write(TXB0DLC, cm->length);
 16e:	f8 01       	movw	r30, r16
 170:	62 81       	ldd	r22, Z+2	; 0x02
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	
	for(int i=0; i<cm->length; i++){
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	09 c0       	rjmp	.+18     	; 0x190 <canned+0x54>
		mcp2515_write(TXB0D0 + i, cm->data[i]);
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	63 81       	ldd	r22, Z+3	; 0x03
 186:	8c 2f       	mov	r24, r28
 188:	8a 5c       	subi	r24, 0xCA	; 202
 18a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
{	
	mcp2515_write(TXB0SIDH, cm->id>>3);
	mcp2515_write(TXB0SIDL, cm->id<<5);
	mcp2515_write(TXB0DLC, cm->length);
	
	for(int i=0; i<cm->length; i++){
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	f8 01       	movw	r30, r16
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	c8 17       	cp	r28, r24
 198:	d9 07       	cpc	r29, r25
 19a:	8c f3       	brlt	.-30     	; 0x17e <canned+0x42>
		mcp2515_write(TXB0D0 + i, cm->data[i]);
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
 19c:	81 e8       	ldi	r24, 0x81	; 129
 19e:	0e 94 92 01 	call	0x324	; 0x324 <mcp2515_request_to_send>
	
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <joystick_init>:
#define RIGHT_SLIDER 3


void joystick_init()
{
	PORTB |= (1<<PB2);
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	88 bb       	out	0x18, r24	; 24
	DDRB |= (1<<DDB2);
 1b2:	87 b3       	in	r24, 0x17	; 23
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	08 95       	ret

000001ba <read_joystick_pos>:
}

JOYSTICK_POS read_joystick_pos()
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	JOYSTICK_POS pos_j;
	pos_j.x = (int)adc_read(JOYSTICK_DIRECTION_X);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	99 83       	std	Y+1, r25	; 0x01
 1ca:	88 83       	st	Y, r24
	pos_j.y = (int)adc_read(JOYSTICK_DIRECTION_Y);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9b 83       	std	Y+3, r25	; 0x03
 1d6:	8a 83       	std	Y+2, r24	; 0x02
	pos_j.left = (int)adc_read(LEFT_SLIDER);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9d 83       	std	Y+5, r25	; 0x05
 1e2:	8c 83       	std	Y+4, r24	; 0x04
	pos_j.right = (int)adc_read(RIGHT_SLIDER);
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_read>
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9f 83       	std	Y+7, r25	; 0x07
 1ee:	8e 83       	std	Y+6, r24	; 0x06
	pos_j.button =  (PIND & (1<< PD5));
 1f0:	80 b3       	in	r24, 0x10	; 16
 1f2:	80 72       	andi	r24, 0x20	; 32
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	99 87       	std	Y+9, r25	; 0x09
 1f8:	88 87       	std	Y+8, r24	; 0x08
	return pos_j;
}
 1fa:	ce 01       	movw	r24, r28
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <main>:
#include "can.h"
#include <util/delay.h>
#include <avr/interrupt.h>

int main()
{	
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	65 97       	sbiw	r28, 0x15	; 21
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	//volatile JOYSTICK_POS pos_j;
	//volatile SLIDER_POS pos_s;
	//volatile JOYSTICK_DIR dir_j;
	 
	USART_Init(MY_UBRR);
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 01 02 	call	0x402	; 0x402 <USART_Init>
	fdevopen(&USART_Transmit,&USART_Receive);
 21e:	61 e1       	ldi	r22, 0x11	; 17
 220:	72 e0       	ldi	r23, 0x02	; 2
 222:	8b e0       	ldi	r24, 0x0B	; 11
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	0e 94 16 02 	call	0x42c	; 0x42c <fdevopen>
	
	SRAM_INIT();
 22a:	0e 94 87 00 	call	0x10e	; 0x10e <SRAM_INIT>
	can_init();
 22e:	0e 94 8e 00 	call	0x11c	; 0x11c <can_init>
	adc_init();
 232:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_init>
	joystick_init();
 236:	0e 94 d6 00 	call	0x1ac	; 0x1ac <joystick_init>
	//oled_init();
	
	DDRB &= ~(1<<PB1);
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB2);	
 240:	87 b3       	in	r24, 0x17	; 23
 242:	8b 7f       	andi	r24, 0xFB	; 251
 244:	87 bb       	out	0x17, r24	; 23

	DDRD &= ~(1<<PD4);
 246:	81 b3       	in	r24, 0x11	; 17
 248:	8f 7e       	andi	r24, 0xEF	; 239
 24a:	81 bb       	out	0x11, r24	; 17
		
	printf("Starting...\n");
 24c:	8f e4       	ldi	r24, 0x4F	; 79
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 77 02 	call	0x4ee	; 0x4ee <puts>
	uint8_t address_spi = 0x05;
	uint8_t data_spi;
	uint8_t status;
	ADC_read();
 254:	0e 94 84 00 	call	0x108	; 0x108 <ADC_read>

	can_message can_joy;
	volatile JOYSTICK_POS joy_pos;
	
	
	uint8_t id = 0;
 258:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{	
		joy_pos = read_joystick_pos();
 25a:	ce 01       	movw	r24, r28
 25c:	0c 96       	adiw	r24, 0x0c	; 12
 25e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <read_joystick_pos>
	//	joy_pos = calibrate_slider_pos(joy_pos);
		can_joy.id = id;
 262:	81 2f       	mov	r24, r17
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
		can_joy.length = 5;
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8b 83       	std	Y+3, r24	; 0x03
		can_joy.data[0] = joy_pos.x;
 26e:	8c 85       	ldd	r24, Y+12	; 0x0c
 270:	9d 85       	ldd	r25, Y+13	; 0x0d
 272:	8c 83       	std	Y+4, r24	; 0x04
		can_joy.data[1] = joy_pos.y;
 274:	2e 85       	ldd	r18, Y+14	; 0x0e
 276:	3f 85       	ldd	r19, Y+15	; 0x0f
 278:	2d 83       	std	Y+5, r18	; 0x05
		can_joy.data[2] = joy_pos.left;
 27a:	48 89       	ldd	r20, Y+16	; 0x10
 27c:	59 89       	ldd	r21, Y+17	; 0x11
 27e:	4e 83       	std	Y+6, r20	; 0x06
		can_joy.data[3] = joy_pos.right;
 280:	6a 89       	ldd	r22, Y+18	; 0x12
 282:	7b 89       	ldd	r23, Y+19	; 0x13
 284:	6f 83       	std	Y+7, r22	; 0x07
		can_joy.data[4] = joy_pos.button;
 286:	ec 89       	ldd	r30, Y+20	; 0x14
 288:	fd 89       	ldd	r31, Y+21	; 0x15
 28a:	e8 87       	std	Y+8, r30	; 0x08
		printf("x:%d , y: %d, ledt: %d, right: %d, button: %d", can_joy.data[0], can_joy.data[1], can_joy.data[2], can_joy.data[3], can_joy.data[4]);
 28c:	1f 92       	push	r1
 28e:	ef 93       	push	r30
 290:	1f 92       	push	r1
 292:	6f 93       	push	r22
 294:	1f 92       	push	r1
 296:	4f 93       	push	r20
 298:	1f 92       	push	r1
 29a:	2f 93       	push	r18
 29c:	1f 92       	push	r1
 29e:	8f 93       	push	r24
 2a0:	8b e5       	ldi	r24, 0x5B	; 91
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>
		canned(&can_joy);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 9e 00 	call	0x13c	; 0x13c <canned>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0xb8>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0xc2>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0xc4>
		_delay_ms(200);
		id += 1;
 2c6:	1f 5f       	subi	r17, 0xFF	; 255
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	c3 cf       	rjmp	.-122    	; 0x25a <main+0x58>

000002d4 <mcp2515_read>:
	mcp2515_write(MCP_CNF3, 0x05);	//PS2 = 6
	
}

uint8_t mcp2515_read(uint8_t address)
{
 2d4:	cf 93       	push	r28
 2d6:	c8 2f       	mov	r28, r24
	uint8_t result ;
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	8f 7e       	andi	r24, 0xEF	; 239
 2dc:	88 bb       	out	0x18, r24	; 24
	SPI_write( MCP_READ ); // Send read instruction
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write( address ); // Send address
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	result = SPI_read () ; // Read result
 2ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_read>
	PORTB |= (1 << PB4 ); // Deselect CAN - controller
 2ee:	98 b3       	in	r25, 0x18	; 24
 2f0:	90 61       	ori	r25, 0x10	; 16
 2f2:	98 bb       	out	0x18, r25	; 24
	return result ;
}
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	d8 2f       	mov	r29, r24
 2fe:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
 300:	88 b3       	in	r24, 0x18	; 24
 302:	8f 7e       	andi	r24, 0xEF	; 239
 304:	88 bb       	out	0x18, r24	; 24
	SPI_write( MCP_WRITE ); // Send read instruction
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write( address ); // Send address
 30c:	8d 2f       	mov	r24, r29
 30e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write( data ); // Send data
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	PORTB |= (1 << PB4 ); // Deselect CAN - controller
 318:	88 b3       	in	r24, 0x18	; 24
 31a:	80 61       	ori	r24, 0x10	; 16
 31c:	88 bb       	out	0x18, r24	; 24
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << CAN_CS );
 324:	98 b3       	in	r25, 0x18	; 24
 326:	9f 7e       	andi	r25, 0xEF	; 239
 328:	98 bb       	out	0x18, r25	; 24
	SPI_write(buffer);
 32a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	PORTB |= (1 << CAN_CS );
 32e:	88 b3       	in	r24, 0x18	; 24
 330:	80 61       	ori	r24, 0x10	; 16
 332:	88 bb       	out	0x18, r24	; 24
 334:	08 95       	ret

00000336 <mcp2515_bit_modify>:
}

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	18 2f       	mov	r17, r24
 33e:	d6 2f       	mov	r29, r22
 340:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << CAN_CS );
 342:	88 b3       	in	r24, 0x18	; 24
 344:	8f 7e       	andi	r24, 0xEF	; 239
 346:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_BITMOD);
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write(address);
 34e:	81 2f       	mov	r24, r17
 350:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write(mask);
 354:	8d 2f       	mov	r24, r29
 356:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	SPI_write(data);
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	PORTB |= (1 << CAN_CS );
 360:	88 b3       	in	r24, 0x18	; 24
 362:	80 61       	ori	r24, 0x10	; 16
 364:	88 bb       	out	0x18, r24	; 24
	
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <mcp2515_reset>:

void mcp2515_reset()
{
	PORTB &= ~(1 << PB4 );
 36e:	88 b3       	in	r24, 0x18	; 24
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	88 bb       	out	0x18, r24	; 24
	SPI_write(MCP_RESET);
 374:	80 ec       	ldi	r24, 0xC0	; 192
 376:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	PORTB |= (1 << PB4 );
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	80 61       	ori	r24, 0x10	; 16
 37e:	88 bb       	out	0x18, r24	; 24
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	9f e2       	ldi	r25, 0x2F	; 47
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <mcp2515_reset+0x16>
 388:	00 c0       	rjmp	.+0      	; 0x38a <mcp2515_reset+0x1c>
 38a:	00 00       	nop
 38c:	08 95       	ret

0000038e <mcp_init>:
#define PS2 6

void mcp_init()
{

	SPI_Init();
 38e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SPI_Init>
	mcp2515_reset();
 392:	0e 94 b7 01 	call	0x36e	; 0x36e <mcp2515_reset>
	uint8_t value = mcp2515_read( MCP_CANSTAT);
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 39c:	80 7e       	andi	r24, 0xE0	; 224
 39e:	80 38       	cpi	r24, 0x80	; 128
 3a0:	21 f0       	breq	.+8      	; 0x3aa <mcp_init+0x1c>
		printf (" MCP2515 is NOT in configs mode after reset !\n");
 3a2:	89 e8       	ldi	r24, 0x89	; 137
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 77 02 	call	0x4ee	; 0x4ee <puts>
	}
	
	uint8_t BRP = can_cpu / (2* TQ * baudrate); // BRP=4
	
	mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	8b e2       	ldi	r24, 0x2B	; 43
 3b0:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0);
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	8c e2       	ldi	r24, 0x2C	; 44
 3ba:	0e 94 9b 01 	call	0x336	; 0x336 <mcp2515_bit_modify>
	
	mcp2515_write(MCP_CNF1, 0x03);	//BRP = 4
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	8a e2       	ldi	r24, 0x2A	; 42
 3c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0xB1);	//PS1 = 7
 3c6:	61 eb       	ldi	r22, 0xB1	; 177
 3c8:	89 e2       	ldi	r24, 0x29	; 41
 3ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
	mcp2515_write(MCP_CNF3, 0x05);	//PS2 = 6
 3ce:	65 e0       	ldi	r22, 0x05	; 5
 3d0:	88 e2       	ldi	r24, 0x28	; 40
 3d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mcp2515_write>
 3d6:	08 95       	ret

000003d8 <SPI_Init>:
#include "spi_driver.h"

void SPI_Init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 3d8:	87 b3       	in	r24, 0x17	; 23
 3da:	80 6b       	ori	r24, 0xB0	; 176
 3dc:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB1) & ~(1<<PB2) & ~(1<<PB3) & ~(1<<PB6);
 3de:	87 b3       	in	r24, 0x17	; 23
 3e0:	81 7b       	andi	r24, 0xB1	; 177
 3e2:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3e4:	81 e5       	ldi	r24, 0x51	; 81
 3e6:	8d b9       	out	0x0d, r24	; 13
	//printf("SPCR: %02X \n", SPCR);
	PORTB |= (1<<PB4);
 3e8:	88 b3       	in	r24, 0x18	; 24
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	88 bb       	out	0x18, r24	; 24
 3ee:	08 95       	ret

000003f0 <SPI_write>:
}
void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
 3f0:	8f b9       	out	0x0f, r24	; 15
	//printf("SPI Write: %02X \n", SPDR);
	//printf("SPI Write 2: %02X \n", cData);
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 3f2:	77 9b       	sbis	0x0e, 7	; 14
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <SPI_write+0x2>
}
 3f6:	08 95       	ret

000003f8 <SPI_read>:
uint8_t SPI_read(void)
{
	/* Start transmission */
	//SPDR = cData;
	/* Wait for transmission complete */
	SPI_write(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_write>
	//while(!(SPSR & (1<<SPIF)));
	//printf("SPI Read: %02X \n", SPDR);
	return SPDR;
 3fe:	8f b1       	in	r24, 0x0f	; 15
}
 400:	08 95       	ret

00000402 <USART_Init>:
void USART_Init(unsigned int baud )
{
	/*
	Set baud rate
	*/
	UBRR0H = (unsigned char)((baud & 0x0F00)>>8);
 402:	9c 01       	movw	r18, r24
 404:	22 27       	eor	r18, r18
 406:	3f 70       	andi	r19, 0x0F	; 15
 408:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char)(baud & 0x00FF);
 40a:	89 b9       	out	0x09, r24	; 9
	/*
	Enable receiver and transmitter
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
 40c:	88 ed       	ldi	r24, 0xD8	; 216
 40e:	8a b9       	out	0x0a, r24	; 10
	/*
	Set frame format: 8data, 1stop bit
	*/
	UCSR0C = (1<<URSEL0) | (1<<UCSZ01) | (1<<UCSZ00) ;
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	80 bd       	out	0x20, r24	; 32
 414:	08 95       	ret

00000416 <USART_Transmit>:
int USART_Transmit(char data, FILE* JUSTNAME )
{
	/*
	Wait for empty transmit buffer
	*/
	while( !( UCSR0A & (1<<UDRE0)) )
 416:	5d 9b       	sbis	0x0b, 5	; 11
 418:	fe cf       	rjmp	.-4      	; 0x416 <USART_Transmit>
	;
	/*
	Put data into buffer, sends the data
	*/
	UDR0 = data;
 41a:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	08 95       	ret

00000422 <USART_Receive>:
int USART_Receive(FILE* JUSTNAME )
{
	/*
	Wait for data to be received
	*/
	while( !(UCSR0A & (1<<RXC0)) )
 422:	5f 9b       	sbis	0x0b, 7	; 11
 424:	fe cf       	rjmp	.-4      	; 0x422 <USART_Receive>
	;
	/*
	Get and return received data from buffer
	*/
	return UDR0;
 426:	8c b1       	in	r24, 0x0c	; 12
}
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 95       	ret

0000042c <fdevopen>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	31 f4       	brne	.+12     	; 0x444 <fdevopen+0x18>
 438:	61 15       	cp	r22, r1
 43a:	71 05       	cpc	r23, r1
 43c:	19 f4       	brne	.+6      	; 0x444 <fdevopen+0x18>
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	3a c0       	rjmp	.+116    	; 0x4b8 <fdevopen+0x8c>
 444:	8b 01       	movw	r16, r22
 446:	ec 01       	movw	r28, r24
 448:	6e e0       	ldi	r22, 0x0E	; 14
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 88 04 	call	0x910	; 0x910 <calloc>
 454:	fc 01       	movw	r30, r24
 456:	89 2b       	or	r24, r25
 458:	91 f3       	breq	.-28     	; 0x43e <fdevopen+0x12>
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	83 83       	std	Z+3, r24	; 0x03
 45e:	01 15       	cp	r16, r1
 460:	11 05       	cpc	r17, r1
 462:	71 f0       	breq	.+28     	; 0x480 <fdevopen+0x54>
 464:	13 87       	std	Z+11, r17	; 0x0b
 466:	02 87       	std	Z+10, r16	; 0x0a
 468:	81 e8       	ldi	r24, 0x81	; 129
 46a:	83 83       	std	Z+3, r24	; 0x03
 46c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 470:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <__data_end+0x1>
 474:	89 2b       	or	r24, r25
 476:	21 f4       	brne	.+8      	; 0x480 <fdevopen+0x54>
 478:	f0 93 b9 01 	sts	0x01B9, r31	; 0x8001b9 <__data_end+0x1>
 47c:	e0 93 b8 01 	sts	0x01B8, r30	; 0x8001b8 <__data_end>
 480:	20 97       	sbiw	r28, 0x00	; 0
 482:	c9 f0       	breq	.+50     	; 0x4b6 <fdevopen+0x8a>
 484:	d1 87       	std	Z+9, r29	; 0x09
 486:	c0 87       	std	Z+8, r28	; 0x08
 488:	83 81       	ldd	r24, Z+3	; 0x03
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	83 83       	std	Z+3, r24	; 0x03
 48e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end+0x2>
 492:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x3>
 496:	89 2b       	or	r24, r25
 498:	71 f4       	brne	.+28     	; 0x4b6 <fdevopen+0x8a>
 49a:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <__data_end+0x3>
 49e:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <__data_end+0x2>
 4a2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end+0x4>
 4a6:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x5>
 4aa:	89 2b       	or	r24, r25
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <fdevopen+0x8a>
 4ae:	f0 93 bd 01 	sts	0x01BD, r31	; 0x8001bd <__data_end+0x5>
 4b2:	e0 93 bc 01 	sts	0x01BC, r30	; 0x8001bc <__data_end+0x4>
 4b6:	cf 01       	movw	r24, r30
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <printf>:
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__prologue_saves__+0x20>
 4ce:	ae 01       	movw	r20, r28
 4d0:	4b 5f       	subi	r20, 0xFB	; 251
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	fa 01       	movw	r30, r20
 4d6:	61 91       	ld	r22, Z+
 4d8:	71 91       	ld	r23, Z+
 4da:	af 01       	movw	r20, r30
 4dc:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end+0x2>
 4e0:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x3>
 4e4:	0e 94 a7 02 	call	0x54e	; 0x54e <vfprintf>
 4e8:	e2 e0       	ldi	r30, 0x02	; 2
 4ea:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__epilogue_restores__+0x20>

000004ee <puts>:
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <__data_end+0x2>
 4fa:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <__data_end+0x3>
 4fe:	23 81       	ldd	r18, Z+3	; 0x03
 500:	21 ff       	sbrs	r18, 1
 502:	1b c0       	rjmp	.+54     	; 0x53a <__stack+0x3b>
 504:	8c 01       	movw	r16, r24
 506:	d0 e0       	ldi	r29, 0x00	; 0
 508:	c0 e0       	ldi	r28, 0x00	; 0
 50a:	f8 01       	movw	r30, r16
 50c:	81 91       	ld	r24, Z+
 50e:	8f 01       	movw	r16, r30
 510:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <__data_end+0x2>
 514:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <__data_end+0x3>
 518:	db 01       	movw	r26, r22
 51a:	18 96       	adiw	r26, 0x08	; 8
 51c:	ed 91       	ld	r30, X+
 51e:	fc 91       	ld	r31, X
 520:	19 97       	sbiw	r26, 0x09	; 9
 522:	88 23       	and	r24, r24
 524:	31 f0       	breq	.+12     	; 0x532 <__stack+0x33>
 526:	09 95       	icall
 528:	89 2b       	or	r24, r25
 52a:	79 f3       	breq	.-34     	; 0x50a <__stack+0xb>
 52c:	df ef       	ldi	r29, 0xFF	; 255
 52e:	cf ef       	ldi	r28, 0xFF	; 255
 530:	ec cf       	rjmp	.-40     	; 0x50a <__stack+0xb>
 532:	8a e0       	ldi	r24, 0x0A	; 10
 534:	09 95       	icall
 536:	89 2b       	or	r24, r25
 538:	19 f0       	breq	.+6      	; 0x540 <__stack+0x41>
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0x45>
 540:	8d 2f       	mov	r24, r29
 542:	9c 2f       	mov	r25, r28
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <vfprintf>:
 54e:	ab e0       	ldi	r26, 0x0B	; 11
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	ed ea       	ldi	r30, 0xAD	; 173
 554:	f2 e0       	ldi	r31, 0x02	; 2
 556:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__prologue_saves__>
 55a:	6c 01       	movw	r12, r24
 55c:	7b 01       	movw	r14, r22
 55e:	8a 01       	movw	r16, r20
 560:	fc 01       	movw	r30, r24
 562:	17 82       	std	Z+7, r1	; 0x07
 564:	16 82       	std	Z+6, r1	; 0x06
 566:	83 81       	ldd	r24, Z+3	; 0x03
 568:	81 ff       	sbrs	r24, 1
 56a:	cc c1       	rjmp	.+920    	; 0x904 <vfprintf+0x3b6>
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	3c 01       	movw	r6, r24
 572:	f6 01       	movw	r30, r12
 574:	93 81       	ldd	r25, Z+3	; 0x03
 576:	f7 01       	movw	r30, r14
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	88 23       	and	r24, r24
 584:	09 f4       	brne	.+2      	; 0x588 <vfprintf+0x3a>
 586:	ba c1       	rjmp	.+884    	; 0x8fc <vfprintf+0x3ae>
 588:	85 32       	cpi	r24, 0x25	; 37
 58a:	39 f4       	brne	.+14     	; 0x59a <vfprintf+0x4c>
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	85 32       	cpi	r24, 0x25	; 37
 598:	29 f4       	brne	.+10     	; 0x5a4 <vfprintf+0x56>
 59a:	b6 01       	movw	r22, r12
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 5a2:	e7 cf       	rjmp	.-50     	; 0x572 <vfprintf+0x24>
 5a4:	91 2c       	mov	r9, r1
 5a6:	21 2c       	mov	r2, r1
 5a8:	31 2c       	mov	r3, r1
 5aa:	ff e1       	ldi	r31, 0x1F	; 31
 5ac:	f3 15       	cp	r31, r3
 5ae:	d8 f0       	brcs	.+54     	; 0x5e6 <vfprintf+0x98>
 5b0:	8b 32       	cpi	r24, 0x2B	; 43
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <vfprintf+0x84>
 5b4:	38 f4       	brcc	.+14     	; 0x5c4 <vfprintf+0x76>
 5b6:	80 32       	cpi	r24, 0x20	; 32
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <vfprintf+0x8a>
 5ba:	83 32       	cpi	r24, 0x23	; 35
 5bc:	a1 f4       	brne	.+40     	; 0x5e6 <vfprintf+0x98>
 5be:	23 2d       	mov	r18, r3
 5c0:	20 61       	ori	r18, 0x10	; 16
 5c2:	1d c0       	rjmp	.+58     	; 0x5fe <vfprintf+0xb0>
 5c4:	8d 32       	cpi	r24, 0x2D	; 45
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <vfprintf+0x92>
 5c8:	80 33       	cpi	r24, 0x30	; 48
 5ca:	69 f4       	brne	.+26     	; 0x5e6 <vfprintf+0x98>
 5cc:	23 2d       	mov	r18, r3
 5ce:	21 60       	ori	r18, 0x01	; 1
 5d0:	16 c0       	rjmp	.+44     	; 0x5fe <vfprintf+0xb0>
 5d2:	83 2d       	mov	r24, r3
 5d4:	82 60       	ori	r24, 0x02	; 2
 5d6:	38 2e       	mov	r3, r24
 5d8:	e3 2d       	mov	r30, r3
 5da:	e4 60       	ori	r30, 0x04	; 4
 5dc:	3e 2e       	mov	r3, r30
 5de:	2a c0       	rjmp	.+84     	; 0x634 <vfprintf+0xe6>
 5e0:	f3 2d       	mov	r31, r3
 5e2:	f8 60       	ori	r31, 0x08	; 8
 5e4:	1d c0       	rjmp	.+58     	; 0x620 <vfprintf+0xd2>
 5e6:	37 fc       	sbrc	r3, 7
 5e8:	2d c0       	rjmp	.+90     	; 0x644 <vfprintf+0xf6>
 5ea:	20 ed       	ldi	r18, 0xD0	; 208
 5ec:	28 0f       	add	r18, r24
 5ee:	2a 30       	cpi	r18, 0x0A	; 10
 5f0:	40 f0       	brcs	.+16     	; 0x602 <vfprintf+0xb4>
 5f2:	8e 32       	cpi	r24, 0x2E	; 46
 5f4:	b9 f4       	brne	.+46     	; 0x624 <vfprintf+0xd6>
 5f6:	36 fc       	sbrc	r3, 6
 5f8:	81 c1       	rjmp	.+770    	; 0x8fc <vfprintf+0x3ae>
 5fa:	23 2d       	mov	r18, r3
 5fc:	20 64       	ori	r18, 0x40	; 64
 5fe:	32 2e       	mov	r3, r18
 600:	19 c0       	rjmp	.+50     	; 0x634 <vfprintf+0xe6>
 602:	36 fe       	sbrs	r3, 6
 604:	06 c0       	rjmp	.+12     	; 0x612 <vfprintf+0xc4>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	98 9e       	mul	r9, r24
 60a:	20 0d       	add	r18, r0
 60c:	11 24       	eor	r1, r1
 60e:	92 2e       	mov	r9, r18
 610:	11 c0       	rjmp	.+34     	; 0x634 <vfprintf+0xe6>
 612:	ea e0       	ldi	r30, 0x0A	; 10
 614:	2e 9e       	mul	r2, r30
 616:	20 0d       	add	r18, r0
 618:	11 24       	eor	r1, r1
 61a:	22 2e       	mov	r2, r18
 61c:	f3 2d       	mov	r31, r3
 61e:	f0 62       	ori	r31, 0x20	; 32
 620:	3f 2e       	mov	r3, r31
 622:	08 c0       	rjmp	.+16     	; 0x634 <vfprintf+0xe6>
 624:	8c 36       	cpi	r24, 0x6C	; 108
 626:	21 f4       	brne	.+8      	; 0x630 <vfprintf+0xe2>
 628:	83 2d       	mov	r24, r3
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	38 2e       	mov	r3, r24
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0xe6>
 630:	88 36       	cpi	r24, 0x68	; 104
 632:	41 f4       	brne	.+16     	; 0x644 <vfprintf+0xf6>
 634:	f7 01       	movw	r30, r14
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	7f 01       	movw	r14, r30
 640:	81 11       	cpse	r24, r1
 642:	b3 cf       	rjmp	.-154    	; 0x5aa <vfprintf+0x5c>
 644:	98 2f       	mov	r25, r24
 646:	9f 7d       	andi	r25, 0xDF	; 223
 648:	95 54       	subi	r25, 0x45	; 69
 64a:	93 30       	cpi	r25, 0x03	; 3
 64c:	28 f4       	brcc	.+10     	; 0x658 <vfprintf+0x10a>
 64e:	0c 5f       	subi	r16, 0xFC	; 252
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	9f e3       	ldi	r25, 0x3F	; 63
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	0d c0       	rjmp	.+26     	; 0x672 <vfprintf+0x124>
 658:	83 36       	cpi	r24, 0x63	; 99
 65a:	31 f0       	breq	.+12     	; 0x668 <vfprintf+0x11a>
 65c:	83 37       	cpi	r24, 0x73	; 115
 65e:	71 f0       	breq	.+28     	; 0x67c <vfprintf+0x12e>
 660:	83 35       	cpi	r24, 0x53	; 83
 662:	09 f0       	breq	.+2      	; 0x666 <vfprintf+0x118>
 664:	59 c0       	rjmp	.+178    	; 0x718 <vfprintf+0x1ca>
 666:	21 c0       	rjmp	.+66     	; 0x6aa <vfprintf+0x15c>
 668:	f8 01       	movw	r30, r16
 66a:	80 81       	ld	r24, Z
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	0e 5f       	subi	r16, 0xFE	; 254
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	88 24       	eor	r8, r8
 674:	83 94       	inc	r8
 676:	91 2c       	mov	r9, r1
 678:	53 01       	movw	r10, r6
 67a:	13 c0       	rjmp	.+38     	; 0x6a2 <vfprintf+0x154>
 67c:	28 01       	movw	r4, r16
 67e:	f2 e0       	ldi	r31, 0x02	; 2
 680:	4f 0e       	add	r4, r31
 682:	51 1c       	adc	r5, r1
 684:	f8 01       	movw	r30, r16
 686:	a0 80       	ld	r10, Z
 688:	b1 80       	ldd	r11, Z+1	; 0x01
 68a:	36 fe       	sbrs	r3, 6
 68c:	03 c0       	rjmp	.+6      	; 0x694 <vfprintf+0x146>
 68e:	69 2d       	mov	r22, r9
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x14a>
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	c5 01       	movw	r24, r10
 69a:	0e 94 d7 05 	call	0xbae	; 0xbae <strnlen>
 69e:	4c 01       	movw	r8, r24
 6a0:	82 01       	movw	r16, r4
 6a2:	f3 2d       	mov	r31, r3
 6a4:	ff 77       	andi	r31, 0x7F	; 127
 6a6:	3f 2e       	mov	r3, r31
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <vfprintf+0x188>
 6aa:	28 01       	movw	r4, r16
 6ac:	22 e0       	ldi	r18, 0x02	; 2
 6ae:	42 0e       	add	r4, r18
 6b0:	51 1c       	adc	r5, r1
 6b2:	f8 01       	movw	r30, r16
 6b4:	a0 80       	ld	r10, Z
 6b6:	b1 80       	ldd	r11, Z+1	; 0x01
 6b8:	36 fe       	sbrs	r3, 6
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <vfprintf+0x174>
 6bc:	69 2d       	mov	r22, r9
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <vfprintf+0x178>
 6c2:	6f ef       	ldi	r22, 0xFF	; 255
 6c4:	7f ef       	ldi	r23, 0xFF	; 255
 6c6:	c5 01       	movw	r24, r10
 6c8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <strnlen_P>
 6cc:	4c 01       	movw	r8, r24
 6ce:	f3 2d       	mov	r31, r3
 6d0:	f0 68       	ori	r31, 0x80	; 128
 6d2:	3f 2e       	mov	r3, r31
 6d4:	82 01       	movw	r16, r4
 6d6:	33 fc       	sbrc	r3, 3
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <vfprintf+0x1c2>
 6da:	82 2d       	mov	r24, r2
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	88 16       	cp	r8, r24
 6e0:	99 06       	cpc	r9, r25
 6e2:	b0 f4       	brcc	.+44     	; 0x710 <vfprintf+0x1c2>
 6e4:	b6 01       	movw	r22, r12
 6e6:	80 e2       	ldi	r24, 0x20	; 32
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 6ee:	2a 94       	dec	r2
 6f0:	f4 cf       	rjmp	.-24     	; 0x6da <vfprintf+0x18c>
 6f2:	f5 01       	movw	r30, r10
 6f4:	37 fc       	sbrc	r3, 7
 6f6:	85 91       	lpm	r24, Z+
 6f8:	37 fe       	sbrs	r3, 7
 6fa:	81 91       	ld	r24, Z+
 6fc:	5f 01       	movw	r10, r30
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 706:	21 10       	cpse	r2, r1
 708:	2a 94       	dec	r2
 70a:	21 e0       	ldi	r18, 0x01	; 1
 70c:	82 1a       	sub	r8, r18
 70e:	91 08       	sbc	r9, r1
 710:	81 14       	cp	r8, r1
 712:	91 04       	cpc	r9, r1
 714:	71 f7       	brne	.-36     	; 0x6f2 <vfprintf+0x1a4>
 716:	e8 c0       	rjmp	.+464    	; 0x8e8 <vfprintf+0x39a>
 718:	84 36       	cpi	r24, 0x64	; 100
 71a:	11 f0       	breq	.+4      	; 0x720 <vfprintf+0x1d2>
 71c:	89 36       	cpi	r24, 0x69	; 105
 71e:	41 f5       	brne	.+80     	; 0x770 <vfprintf+0x222>
 720:	f8 01       	movw	r30, r16
 722:	37 fe       	sbrs	r3, 7
 724:	07 c0       	rjmp	.+14     	; 0x734 <vfprintf+0x1e6>
 726:	60 81       	ld	r22, Z
 728:	71 81       	ldd	r23, Z+1	; 0x01
 72a:	82 81       	ldd	r24, Z+2	; 0x02
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	0c 5f       	subi	r16, 0xFC	; 252
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	08 c0       	rjmp	.+16     	; 0x744 <vfprintf+0x1f6>
 734:	60 81       	ld	r22, Z
 736:	71 81       	ldd	r23, Z+1	; 0x01
 738:	07 2e       	mov	r0, r23
 73a:	00 0c       	add	r0, r0
 73c:	88 0b       	sbc	r24, r24
 73e:	99 0b       	sbc	r25, r25
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	f3 2d       	mov	r31, r3
 746:	ff 76       	andi	r31, 0x6F	; 111
 748:	3f 2e       	mov	r3, r31
 74a:	97 ff       	sbrs	r25, 7
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x212>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	f0 68       	ori	r31, 0x80	; 128
 75e:	3f 2e       	mov	r3, r31
 760:	2a e0       	ldi	r18, 0x0A	; 10
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	a3 01       	movw	r20, r6
 766:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__ultoa_invert>
 76a:	88 2e       	mov	r8, r24
 76c:	86 18       	sub	r8, r6
 76e:	45 c0       	rjmp	.+138    	; 0x7fa <vfprintf+0x2ac>
 770:	85 37       	cpi	r24, 0x75	; 117
 772:	31 f4       	brne	.+12     	; 0x780 <vfprintf+0x232>
 774:	23 2d       	mov	r18, r3
 776:	2f 7e       	andi	r18, 0xEF	; 239
 778:	b2 2e       	mov	r11, r18
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	25 c0       	rjmp	.+74     	; 0x7ca <vfprintf+0x27c>
 780:	93 2d       	mov	r25, r3
 782:	99 7f       	andi	r25, 0xF9	; 249
 784:	b9 2e       	mov	r11, r25
 786:	8f 36       	cpi	r24, 0x6F	; 111
 788:	c1 f0       	breq	.+48     	; 0x7ba <vfprintf+0x26c>
 78a:	18 f4       	brcc	.+6      	; 0x792 <vfprintf+0x244>
 78c:	88 35       	cpi	r24, 0x58	; 88
 78e:	79 f0       	breq	.+30     	; 0x7ae <vfprintf+0x260>
 790:	b5 c0       	rjmp	.+362    	; 0x8fc <vfprintf+0x3ae>
 792:	80 37       	cpi	r24, 0x70	; 112
 794:	19 f0       	breq	.+6      	; 0x79c <vfprintf+0x24e>
 796:	88 37       	cpi	r24, 0x78	; 120
 798:	21 f0       	breq	.+8      	; 0x7a2 <vfprintf+0x254>
 79a:	b0 c0       	rjmp	.+352    	; 0x8fc <vfprintf+0x3ae>
 79c:	e9 2f       	mov	r30, r25
 79e:	e0 61       	ori	r30, 0x10	; 16
 7a0:	be 2e       	mov	r11, r30
 7a2:	b4 fe       	sbrs	r11, 4
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x272>
 7a6:	fb 2d       	mov	r31, r11
 7a8:	f4 60       	ori	r31, 0x04	; 4
 7aa:	bf 2e       	mov	r11, r31
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x272>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <vfprintf+0x278>
 7b2:	29 2f       	mov	r18, r25
 7b4:	26 60       	ori	r18, 0x06	; 6
 7b6:	b2 2e       	mov	r11, r18
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0x278>
 7ba:	28 e0       	ldi	r18, 0x08	; 8
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x27c>
 7c0:	20 e1       	ldi	r18, 0x10	; 16
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x27c>
 7c6:	20 e1       	ldi	r18, 0x10	; 16
 7c8:	32 e0       	ldi	r19, 0x02	; 2
 7ca:	f8 01       	movw	r30, r16
 7cc:	b7 fe       	sbrs	r11, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x290>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x29c>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	a3 01       	movw	r20, r6
 7ec:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	fb 2d       	mov	r31, r11
 7f6:	ff 77       	andi	r31, 0x7F	; 127
 7f8:	3f 2e       	mov	r3, r31
 7fa:	36 fe       	sbrs	r3, 6
 7fc:	0d c0       	rjmp	.+26     	; 0x818 <vfprintf+0x2ca>
 7fe:	23 2d       	mov	r18, r3
 800:	2e 7f       	andi	r18, 0xFE	; 254
 802:	a2 2e       	mov	r10, r18
 804:	89 14       	cp	r8, r9
 806:	58 f4       	brcc	.+22     	; 0x81e <vfprintf+0x2d0>
 808:	34 fe       	sbrs	r3, 4
 80a:	0b c0       	rjmp	.+22     	; 0x822 <vfprintf+0x2d4>
 80c:	32 fc       	sbrc	r3, 2
 80e:	09 c0       	rjmp	.+18     	; 0x822 <vfprintf+0x2d4>
 810:	83 2d       	mov	r24, r3
 812:	8e 7e       	andi	r24, 0xEE	; 238
 814:	a8 2e       	mov	r10, r24
 816:	05 c0       	rjmp	.+10     	; 0x822 <vfprintf+0x2d4>
 818:	b8 2c       	mov	r11, r8
 81a:	a3 2c       	mov	r10, r3
 81c:	03 c0       	rjmp	.+6      	; 0x824 <vfprintf+0x2d6>
 81e:	b8 2c       	mov	r11, r8
 820:	01 c0       	rjmp	.+2      	; 0x824 <vfprintf+0x2d6>
 822:	b9 2c       	mov	r11, r9
 824:	a4 fe       	sbrs	r10, 4
 826:	0f c0       	rjmp	.+30     	; 0x846 <vfprintf+0x2f8>
 828:	fe 01       	movw	r30, r28
 82a:	e8 0d       	add	r30, r8
 82c:	f1 1d       	adc	r31, r1
 82e:	80 81       	ld	r24, Z
 830:	80 33       	cpi	r24, 0x30	; 48
 832:	21 f4       	brne	.+8      	; 0x83c <vfprintf+0x2ee>
 834:	9a 2d       	mov	r25, r10
 836:	99 7e       	andi	r25, 0xE9	; 233
 838:	a9 2e       	mov	r10, r25
 83a:	09 c0       	rjmp	.+18     	; 0x84e <vfprintf+0x300>
 83c:	a2 fe       	sbrs	r10, 2
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0x2fe>
 840:	b3 94       	inc	r11
 842:	b3 94       	inc	r11
 844:	04 c0       	rjmp	.+8      	; 0x84e <vfprintf+0x300>
 846:	8a 2d       	mov	r24, r10
 848:	86 78       	andi	r24, 0x86	; 134
 84a:	09 f0       	breq	.+2      	; 0x84e <vfprintf+0x300>
 84c:	b3 94       	inc	r11
 84e:	a3 fc       	sbrc	r10, 3
 850:	11 c0       	rjmp	.+34     	; 0x874 <vfprintf+0x326>
 852:	a0 fe       	sbrs	r10, 0
 854:	06 c0       	rjmp	.+12     	; 0x862 <vfprintf+0x314>
 856:	b2 14       	cp	r11, r2
 858:	88 f4       	brcc	.+34     	; 0x87c <vfprintf+0x32e>
 85a:	28 0c       	add	r2, r8
 85c:	92 2c       	mov	r9, r2
 85e:	9b 18       	sub	r9, r11
 860:	0e c0       	rjmp	.+28     	; 0x87e <vfprintf+0x330>
 862:	b2 14       	cp	r11, r2
 864:	60 f4       	brcc	.+24     	; 0x87e <vfprintf+0x330>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 870:	b3 94       	inc	r11
 872:	f7 cf       	rjmp	.-18     	; 0x862 <vfprintf+0x314>
 874:	b2 14       	cp	r11, r2
 876:	18 f4       	brcc	.+6      	; 0x87e <vfprintf+0x330>
 878:	2b 18       	sub	r2, r11
 87a:	02 c0       	rjmp	.+4      	; 0x880 <vfprintf+0x332>
 87c:	98 2c       	mov	r9, r8
 87e:	21 2c       	mov	r2, r1
 880:	a4 fe       	sbrs	r10, 4
 882:	10 c0       	rjmp	.+32     	; 0x8a4 <vfprintf+0x356>
 884:	b6 01       	movw	r22, r12
 886:	80 e3       	ldi	r24, 0x30	; 48
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 88e:	a2 fe       	sbrs	r10, 2
 890:	17 c0       	rjmp	.+46     	; 0x8c0 <vfprintf+0x372>
 892:	a1 fc       	sbrc	r10, 1
 894:	03 c0       	rjmp	.+6      	; 0x89c <vfprintf+0x34e>
 896:	88 e7       	ldi	r24, 0x78	; 120
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <vfprintf+0x352>
 89c:	88 e5       	ldi	r24, 0x58	; 88
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	b6 01       	movw	r22, r12
 8a2:	0c c0       	rjmp	.+24     	; 0x8bc <vfprintf+0x36e>
 8a4:	8a 2d       	mov	r24, r10
 8a6:	86 78       	andi	r24, 0x86	; 134
 8a8:	59 f0       	breq	.+22     	; 0x8c0 <vfprintf+0x372>
 8aa:	a1 fe       	sbrs	r10, 1
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x364>
 8ae:	8b e2       	ldi	r24, 0x2B	; 43
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <vfprintf+0x366>
 8b2:	80 e2       	ldi	r24, 0x20	; 32
 8b4:	a7 fc       	sbrc	r10, 7
 8b6:	8d e2       	ldi	r24, 0x2D	; 45
 8b8:	b6 01       	movw	r22, r12
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 8c0:	89 14       	cp	r8, r9
 8c2:	38 f4       	brcc	.+14     	; 0x8d2 <vfprintf+0x384>
 8c4:	b6 01       	movw	r22, r12
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 8ce:	9a 94       	dec	r9
 8d0:	f7 cf       	rjmp	.-18     	; 0x8c0 <vfprintf+0x372>
 8d2:	8a 94       	dec	r8
 8d4:	f3 01       	movw	r30, r6
 8d6:	e8 0d       	add	r30, r8
 8d8:	f1 1d       	adc	r31, r1
 8da:	80 81       	ld	r24, Z
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 8e4:	81 10       	cpse	r8, r1
 8e6:	f5 cf       	rjmp	.-22     	; 0x8d2 <vfprintf+0x384>
 8e8:	22 20       	and	r2, r2
 8ea:	09 f4       	brne	.+2      	; 0x8ee <vfprintf+0x3a0>
 8ec:	42 ce       	rjmp	.-892    	; 0x572 <vfprintf+0x24>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 8f8:	2a 94       	dec	r2
 8fa:	f6 cf       	rjmp	.-20     	; 0x8e8 <vfprintf+0x39a>
 8fc:	f6 01       	movw	r30, r12
 8fe:	86 81       	ldd	r24, Z+6	; 0x06
 900:	97 81       	ldd	r25, Z+7	; 0x07
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x3ba>
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	2b 96       	adiw	r28, 0x0b	; 11
 90a:	e2 e1       	ldi	r30, 0x12	; 18
 90c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__epilogue_restores__>

00000910 <calloc>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	86 9f       	mul	r24, r22
 91a:	80 01       	movw	r16, r0
 91c:	87 9f       	mul	r24, r23
 91e:	10 0d       	add	r17, r0
 920:	96 9f       	mul	r25, r22
 922:	10 0d       	add	r17, r0
 924:	11 24       	eor	r1, r1
 926:	c8 01       	movw	r24, r16
 928:	0e 94 a4 04 	call	0x948	; 0x948 <malloc>
 92c:	ec 01       	movw	r28, r24
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	29 f0       	breq	.+10     	; 0x93c <calloc+0x2c>
 932:	a8 01       	movw	r20, r16
 934:	60 e0       	ldi	r22, 0x00	; 0
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	0e 94 d0 05 	call	0xba0	; 0xba0 <memset>
 93c:	ce 01       	movw	r24, r28
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <malloc>:
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	82 30       	cpi	r24, 0x02	; 2
 952:	91 05       	cpc	r25, r1
 954:	10 f4       	brcc	.+4      	; 0x95a <malloc+0x12>
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <__flp>
 95e:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <__flp+0x1>
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	a0 e0       	ldi	r26, 0x00	; 0
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	30 97       	sbiw	r30, 0x00	; 0
 96c:	19 f1       	breq	.+70     	; 0x9b4 <malloc+0x6c>
 96e:	40 81       	ld	r20, Z
 970:	51 81       	ldd	r21, Z+1	; 0x01
 972:	02 81       	ldd	r16, Z+2	; 0x02
 974:	13 81       	ldd	r17, Z+3	; 0x03
 976:	48 17       	cp	r20, r24
 978:	59 07       	cpc	r21, r25
 97a:	c8 f0       	brcs	.+50     	; 0x9ae <malloc+0x66>
 97c:	84 17       	cp	r24, r20
 97e:	95 07       	cpc	r25, r21
 980:	69 f4       	brne	.+26     	; 0x99c <malloc+0x54>
 982:	10 97       	sbiw	r26, 0x00	; 0
 984:	31 f0       	breq	.+12     	; 0x992 <malloc+0x4a>
 986:	12 96       	adiw	r26, 0x02	; 2
 988:	0c 93       	st	X, r16
 98a:	12 97       	sbiw	r26, 0x02	; 2
 98c:	13 96       	adiw	r26, 0x03	; 3
 98e:	1c 93       	st	X, r17
 990:	27 c0       	rjmp	.+78     	; 0x9e0 <malloc+0x98>
 992:	00 93 c0 01 	sts	0x01C0, r16	; 0x8001c0 <__flp>
 996:	10 93 c1 01 	sts	0x01C1, r17	; 0x8001c1 <__flp+0x1>
 99a:	22 c0       	rjmp	.+68     	; 0x9e0 <malloc+0x98>
 99c:	21 15       	cp	r18, r1
 99e:	31 05       	cpc	r19, r1
 9a0:	19 f0       	breq	.+6      	; 0x9a8 <malloc+0x60>
 9a2:	42 17       	cp	r20, r18
 9a4:	53 07       	cpc	r21, r19
 9a6:	18 f4       	brcc	.+6      	; 0x9ae <malloc+0x66>
 9a8:	9a 01       	movw	r18, r20
 9aa:	bd 01       	movw	r22, r26
 9ac:	ef 01       	movw	r28, r30
 9ae:	df 01       	movw	r26, r30
 9b0:	f8 01       	movw	r30, r16
 9b2:	db cf       	rjmp	.-74     	; 0x96a <malloc+0x22>
 9b4:	21 15       	cp	r18, r1
 9b6:	31 05       	cpc	r19, r1
 9b8:	f9 f0       	breq	.+62     	; 0x9f8 <malloc+0xb0>
 9ba:	28 1b       	sub	r18, r24
 9bc:	39 0b       	sbc	r19, r25
 9be:	24 30       	cpi	r18, 0x04	; 4
 9c0:	31 05       	cpc	r19, r1
 9c2:	80 f4       	brcc	.+32     	; 0x9e4 <malloc+0x9c>
 9c4:	8a 81       	ldd	r24, Y+2	; 0x02
 9c6:	9b 81       	ldd	r25, Y+3	; 0x03
 9c8:	61 15       	cp	r22, r1
 9ca:	71 05       	cpc	r23, r1
 9cc:	21 f0       	breq	.+8      	; 0x9d6 <malloc+0x8e>
 9ce:	fb 01       	movw	r30, r22
 9d0:	93 83       	std	Z+3, r25	; 0x03
 9d2:	82 83       	std	Z+2, r24	; 0x02
 9d4:	04 c0       	rjmp	.+8      	; 0x9de <malloc+0x96>
 9d6:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__flp+0x1>
 9da:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__flp>
 9de:	fe 01       	movw	r30, r28
 9e0:	32 96       	adiw	r30, 0x02	; 2
 9e2:	44 c0       	rjmp	.+136    	; 0xa6c <malloc+0x124>
 9e4:	fe 01       	movw	r30, r28
 9e6:	e2 0f       	add	r30, r18
 9e8:	f3 1f       	adc	r31, r19
 9ea:	81 93       	st	Z+, r24
 9ec:	91 93       	st	Z+, r25
 9ee:	22 50       	subi	r18, 0x02	; 2
 9f0:	31 09       	sbc	r19, r1
 9f2:	39 83       	std	Y+1, r19	; 0x01
 9f4:	28 83       	st	Y, r18
 9f6:	3a c0       	rjmp	.+116    	; 0xa6c <malloc+0x124>
 9f8:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__brkval>
 9fc:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__brkval+0x1>
 a00:	23 2b       	or	r18, r19
 a02:	41 f4       	brne	.+16     	; 0xa14 <malloc+0xcc>
 a04:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a08:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a0c:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <__brkval+0x1>
 a10:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <__brkval>
 a14:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a18:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a1c:	21 15       	cp	r18, r1
 a1e:	31 05       	cpc	r19, r1
 a20:	41 f4       	brne	.+16     	; 0xa32 <malloc+0xea>
 a22:	2d b7       	in	r18, 0x3d	; 61
 a24:	3e b7       	in	r19, 0x3e	; 62
 a26:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a2a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a2e:	24 1b       	sub	r18, r20
 a30:	35 0b       	sbc	r19, r21
 a32:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <__brkval>
 a36:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <__brkval+0x1>
 a3a:	e2 17       	cp	r30, r18
 a3c:	f3 07       	cpc	r31, r19
 a3e:	a0 f4       	brcc	.+40     	; 0xa68 <malloc+0x120>
 a40:	2e 1b       	sub	r18, r30
 a42:	3f 0b       	sbc	r19, r31
 a44:	28 17       	cp	r18, r24
 a46:	39 07       	cpc	r19, r25
 a48:	78 f0       	brcs	.+30     	; 0xa68 <malloc+0x120>
 a4a:	ac 01       	movw	r20, r24
 a4c:	4e 5f       	subi	r20, 0xFE	; 254
 a4e:	5f 4f       	sbci	r21, 0xFF	; 255
 a50:	24 17       	cp	r18, r20
 a52:	35 07       	cpc	r19, r21
 a54:	48 f0       	brcs	.+18     	; 0xa68 <malloc+0x120>
 a56:	4e 0f       	add	r20, r30
 a58:	5f 1f       	adc	r21, r31
 a5a:	50 93 bf 01 	sts	0x01BF, r21	; 0x8001bf <__brkval+0x1>
 a5e:	40 93 be 01 	sts	0x01BE, r20	; 0x8001be <__brkval>
 a62:	81 93       	st	Z+, r24
 a64:	91 93       	st	Z+, r25
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <malloc+0x124>
 a68:	e0 e0       	ldi	r30, 0x00	; 0
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	cf 01       	movw	r24, r30
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <free>:
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	09 f4       	brne	.+2      	; 0xa82 <free+0xa>
 a80:	81 c0       	rjmp	.+258    	; 0xb84 <free+0x10c>
 a82:	fc 01       	movw	r30, r24
 a84:	32 97       	sbiw	r30, 0x02	; 2
 a86:	13 82       	std	Z+3, r1	; 0x03
 a88:	12 82       	std	Z+2, r1	; 0x02
 a8a:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <__flp>
 a8e:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <__flp+0x1>
 a92:	10 97       	sbiw	r26, 0x00	; 0
 a94:	81 f4       	brne	.+32     	; 0xab6 <free+0x3e>
 a96:	20 81       	ld	r18, Z
 a98:	31 81       	ldd	r19, Z+1	; 0x01
 a9a:	82 0f       	add	r24, r18
 a9c:	93 1f       	adc	r25, r19
 a9e:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__brkval>
 aa2:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__brkval+0x1>
 aa6:	28 17       	cp	r18, r24
 aa8:	39 07       	cpc	r19, r25
 aaa:	51 f5       	brne	.+84     	; 0xb00 <free+0x88>
 aac:	f0 93 bf 01 	sts	0x01BF, r31	; 0x8001bf <__brkval+0x1>
 ab0:	e0 93 be 01 	sts	0x01BE, r30	; 0x8001be <__brkval>
 ab4:	67 c0       	rjmp	.+206    	; 0xb84 <free+0x10c>
 ab6:	ed 01       	movw	r28, r26
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	ce 17       	cp	r28, r30
 abe:	df 07       	cpc	r29, r31
 ac0:	40 f4       	brcc	.+16     	; 0xad2 <free+0x5a>
 ac2:	4a 81       	ldd	r20, Y+2	; 0x02
 ac4:	5b 81       	ldd	r21, Y+3	; 0x03
 ac6:	9e 01       	movw	r18, r28
 ac8:	41 15       	cp	r20, r1
 aca:	51 05       	cpc	r21, r1
 acc:	f1 f0       	breq	.+60     	; 0xb0a <free+0x92>
 ace:	ea 01       	movw	r28, r20
 ad0:	f5 cf       	rjmp	.-22     	; 0xabc <free+0x44>
 ad2:	d3 83       	std	Z+3, r29	; 0x03
 ad4:	c2 83       	std	Z+2, r28	; 0x02
 ad6:	40 81       	ld	r20, Z
 ad8:	51 81       	ldd	r21, Z+1	; 0x01
 ada:	84 0f       	add	r24, r20
 adc:	95 1f       	adc	r25, r21
 ade:	c8 17       	cp	r28, r24
 ae0:	d9 07       	cpc	r29, r25
 ae2:	59 f4       	brne	.+22     	; 0xafa <free+0x82>
 ae4:	88 81       	ld	r24, Y
 ae6:	99 81       	ldd	r25, Y+1	; 0x01
 ae8:	84 0f       	add	r24, r20
 aea:	95 1f       	adc	r25, r21
 aec:	02 96       	adiw	r24, 0x02	; 2
 aee:	91 83       	std	Z+1, r25	; 0x01
 af0:	80 83       	st	Z, r24
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	9b 81       	ldd	r25, Y+3	; 0x03
 af6:	93 83       	std	Z+3, r25	; 0x03
 af8:	82 83       	std	Z+2, r24	; 0x02
 afa:	21 15       	cp	r18, r1
 afc:	31 05       	cpc	r19, r1
 afe:	29 f4       	brne	.+10     	; 0xb0a <free+0x92>
 b00:	f0 93 c1 01 	sts	0x01C1, r31	; 0x8001c1 <__flp+0x1>
 b04:	e0 93 c0 01 	sts	0x01C0, r30	; 0x8001c0 <__flp>
 b08:	3d c0       	rjmp	.+122    	; 0xb84 <free+0x10c>
 b0a:	e9 01       	movw	r28, r18
 b0c:	fb 83       	std	Y+3, r31	; 0x03
 b0e:	ea 83       	std	Y+2, r30	; 0x02
 b10:	49 91       	ld	r20, Y+
 b12:	59 91       	ld	r21, Y+
 b14:	c4 0f       	add	r28, r20
 b16:	d5 1f       	adc	r29, r21
 b18:	ec 17       	cp	r30, r28
 b1a:	fd 07       	cpc	r31, r29
 b1c:	61 f4       	brne	.+24     	; 0xb36 <free+0xbe>
 b1e:	80 81       	ld	r24, Z
 b20:	91 81       	ldd	r25, Z+1	; 0x01
 b22:	84 0f       	add	r24, r20
 b24:	95 1f       	adc	r25, r21
 b26:	02 96       	adiw	r24, 0x02	; 2
 b28:	e9 01       	movw	r28, r18
 b2a:	99 83       	std	Y+1, r25	; 0x01
 b2c:	88 83       	st	Y, r24
 b2e:	82 81       	ldd	r24, Z+2	; 0x02
 b30:	93 81       	ldd	r25, Z+3	; 0x03
 b32:	9b 83       	std	Y+3, r25	; 0x03
 b34:	8a 83       	std	Y+2, r24	; 0x02
 b36:	e0 e0       	ldi	r30, 0x00	; 0
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	12 96       	adiw	r26, 0x02	; 2
 b3c:	8d 91       	ld	r24, X+
 b3e:	9c 91       	ld	r25, X
 b40:	13 97       	sbiw	r26, 0x03	; 3
 b42:	00 97       	sbiw	r24, 0x00	; 0
 b44:	19 f0       	breq	.+6      	; 0xb4c <free+0xd4>
 b46:	fd 01       	movw	r30, r26
 b48:	dc 01       	movw	r26, r24
 b4a:	f7 cf       	rjmp	.-18     	; 0xb3a <free+0xc2>
 b4c:	8d 91       	ld	r24, X+
 b4e:	9c 91       	ld	r25, X
 b50:	11 97       	sbiw	r26, 0x01	; 1
 b52:	9d 01       	movw	r18, r26
 b54:	2e 5f       	subi	r18, 0xFE	; 254
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	82 0f       	add	r24, r18
 b5a:	93 1f       	adc	r25, r19
 b5c:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__brkval>
 b60:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__brkval+0x1>
 b64:	28 17       	cp	r18, r24
 b66:	39 07       	cpc	r19, r25
 b68:	69 f4       	brne	.+26     	; 0xb84 <free+0x10c>
 b6a:	30 97       	sbiw	r30, 0x00	; 0
 b6c:	29 f4       	brne	.+10     	; 0xb78 <free+0x100>
 b6e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <__flp+0x1>
 b72:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__flp>
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <free+0x104>
 b78:	13 82       	std	Z+3, r1	; 0x03
 b7a:	12 82       	std	Z+2, r1	; 0x02
 b7c:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <__brkval+0x1>
 b80:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <__brkval>
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	08 95       	ret

00000b8a <strnlen_P>:
 b8a:	fc 01       	movw	r30, r24
 b8c:	05 90       	lpm	r0, Z+
 b8e:	61 50       	subi	r22, 0x01	; 1
 b90:	70 40       	sbci	r23, 0x00	; 0
 b92:	01 10       	cpse	r0, r1
 b94:	d8 f7       	brcc	.-10     	; 0xb8c <strnlen_P+0x2>
 b96:	80 95       	com	r24
 b98:	90 95       	com	r25
 b9a:	8e 0f       	add	r24, r30
 b9c:	9f 1f       	adc	r25, r31
 b9e:	08 95       	ret

00000ba0 <memset>:
 ba0:	dc 01       	movw	r26, r24
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <memset+0x6>
 ba4:	6d 93       	st	X+, r22
 ba6:	41 50       	subi	r20, 0x01	; 1
 ba8:	50 40       	sbci	r21, 0x00	; 0
 baa:	e0 f7       	brcc	.-8      	; 0xba4 <memset+0x4>
 bac:	08 95       	ret

00000bae <strnlen>:
 bae:	fc 01       	movw	r30, r24
 bb0:	61 50       	subi	r22, 0x01	; 1
 bb2:	70 40       	sbci	r23, 0x00	; 0
 bb4:	01 90       	ld	r0, Z+
 bb6:	01 10       	cpse	r0, r1
 bb8:	d8 f7       	brcc	.-10     	; 0xbb0 <strnlen+0x2>
 bba:	80 95       	com	r24
 bbc:	90 95       	com	r25
 bbe:	8e 0f       	add	r24, r30
 bc0:	9f 1f       	adc	r25, r31
 bc2:	08 95       	ret

00000bc4 <fputc>:
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	fb 01       	movw	r30, r22
 bce:	23 81       	ldd	r18, Z+3	; 0x03
 bd0:	21 fd       	sbrc	r18, 1
 bd2:	03 c0       	rjmp	.+6      	; 0xbda <fputc+0x16>
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	2c c0       	rjmp	.+88     	; 0xc32 <fputc+0x6e>
 bda:	22 ff       	sbrs	r18, 2
 bdc:	16 c0       	rjmp	.+44     	; 0xc0a <fputc+0x46>
 bde:	46 81       	ldd	r20, Z+6	; 0x06
 be0:	57 81       	ldd	r21, Z+7	; 0x07
 be2:	24 81       	ldd	r18, Z+4	; 0x04
 be4:	35 81       	ldd	r19, Z+5	; 0x05
 be6:	42 17       	cp	r20, r18
 be8:	53 07       	cpc	r21, r19
 bea:	44 f4       	brge	.+16     	; 0xbfc <fputc+0x38>
 bec:	a0 81       	ld	r26, Z
 bee:	b1 81       	ldd	r27, Z+1	; 0x01
 bf0:	9d 01       	movw	r18, r26
 bf2:	2f 5f       	subi	r18, 0xFF	; 255
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	31 83       	std	Z+1, r19	; 0x01
 bf8:	20 83       	st	Z, r18
 bfa:	8c 93       	st	X, r24
 bfc:	26 81       	ldd	r18, Z+6	; 0x06
 bfe:	37 81       	ldd	r19, Z+7	; 0x07
 c00:	2f 5f       	subi	r18, 0xFF	; 255
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	37 83       	std	Z+7, r19	; 0x07
 c06:	26 83       	std	Z+6, r18	; 0x06
 c08:	14 c0       	rjmp	.+40     	; 0xc32 <fputc+0x6e>
 c0a:	8b 01       	movw	r16, r22
 c0c:	ec 01       	movw	r28, r24
 c0e:	fb 01       	movw	r30, r22
 c10:	00 84       	ldd	r0, Z+8	; 0x08
 c12:	f1 85       	ldd	r31, Z+9	; 0x09
 c14:	e0 2d       	mov	r30, r0
 c16:	09 95       	icall
 c18:	89 2b       	or	r24, r25
 c1a:	e1 f6       	brne	.-72     	; 0xbd4 <fputc+0x10>
 c1c:	d8 01       	movw	r26, r16
 c1e:	16 96       	adiw	r26, 0x06	; 6
 c20:	8d 91       	ld	r24, X+
 c22:	9c 91       	ld	r25, X
 c24:	17 97       	sbiw	r26, 0x07	; 7
 c26:	01 96       	adiw	r24, 0x01	; 1
 c28:	17 96       	adiw	r26, 0x07	; 7
 c2a:	9c 93       	st	X, r25
 c2c:	8e 93       	st	-X, r24
 c2e:	16 97       	sbiw	r26, 0x06	; 6
 c30:	ce 01       	movw	r24, r28
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	08 95       	ret

00000c3c <__ultoa_invert>:
 c3c:	fa 01       	movw	r30, r20
 c3e:	aa 27       	eor	r26, r26
 c40:	28 30       	cpi	r18, 0x08	; 8
 c42:	51 f1       	breq	.+84     	; 0xc98 <__ultoa_invert+0x5c>
 c44:	20 31       	cpi	r18, 0x10	; 16
 c46:	81 f1       	breq	.+96     	; 0xca8 <__ultoa_invert+0x6c>
 c48:	e8 94       	clt
 c4a:	6f 93       	push	r22
 c4c:	6e 7f       	andi	r22, 0xFE	; 254
 c4e:	6e 5f       	subi	r22, 0xFE	; 254
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	af 4f       	sbci	r26, 0xFF	; 255
 c58:	b1 e0       	ldi	r27, 0x01	; 1
 c5a:	3e d0       	rcall	.+124    	; 0xcd8 <__ultoa_invert+0x9c>
 c5c:	b4 e0       	ldi	r27, 0x04	; 4
 c5e:	3c d0       	rcall	.+120    	; 0xcd8 <__ultoa_invert+0x9c>
 c60:	67 0f       	add	r22, r23
 c62:	78 1f       	adc	r23, r24
 c64:	89 1f       	adc	r24, r25
 c66:	9a 1f       	adc	r25, r26
 c68:	a1 1d       	adc	r26, r1
 c6a:	68 0f       	add	r22, r24
 c6c:	79 1f       	adc	r23, r25
 c6e:	8a 1f       	adc	r24, r26
 c70:	91 1d       	adc	r25, r1
 c72:	a1 1d       	adc	r26, r1
 c74:	6a 0f       	add	r22, r26
 c76:	71 1d       	adc	r23, r1
 c78:	81 1d       	adc	r24, r1
 c7a:	91 1d       	adc	r25, r1
 c7c:	a1 1d       	adc	r26, r1
 c7e:	20 d0       	rcall	.+64     	; 0xcc0 <__ultoa_invert+0x84>
 c80:	09 f4       	brne	.+2      	; 0xc84 <__ultoa_invert+0x48>
 c82:	68 94       	set
 c84:	3f 91       	pop	r19
 c86:	2a e0       	ldi	r18, 0x0A	; 10
 c88:	26 9f       	mul	r18, r22
 c8a:	11 24       	eor	r1, r1
 c8c:	30 19       	sub	r19, r0
 c8e:	30 5d       	subi	r19, 0xD0	; 208
 c90:	31 93       	st	Z+, r19
 c92:	de f6       	brtc	.-74     	; 0xc4a <__ultoa_invert+0xe>
 c94:	cf 01       	movw	r24, r30
 c96:	08 95       	ret
 c98:	46 2f       	mov	r20, r22
 c9a:	47 70       	andi	r20, 0x07	; 7
 c9c:	40 5d       	subi	r20, 0xD0	; 208
 c9e:	41 93       	st	Z+, r20
 ca0:	b3 e0       	ldi	r27, 0x03	; 3
 ca2:	0f d0       	rcall	.+30     	; 0xcc2 <__ultoa_invert+0x86>
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__ultoa_invert+0x5c>
 ca6:	f6 cf       	rjmp	.-20     	; 0xc94 <__ultoa_invert+0x58>
 ca8:	46 2f       	mov	r20, r22
 caa:	4f 70       	andi	r20, 0x0F	; 15
 cac:	40 5d       	subi	r20, 0xD0	; 208
 cae:	4a 33       	cpi	r20, 0x3A	; 58
 cb0:	18 f0       	brcs	.+6      	; 0xcb8 <__ultoa_invert+0x7c>
 cb2:	49 5d       	subi	r20, 0xD9	; 217
 cb4:	31 fd       	sbrc	r19, 1
 cb6:	40 52       	subi	r20, 0x20	; 32
 cb8:	41 93       	st	Z+, r20
 cba:	02 d0       	rcall	.+4      	; 0xcc0 <__ultoa_invert+0x84>
 cbc:	a9 f7       	brne	.-22     	; 0xca8 <__ultoa_invert+0x6c>
 cbe:	ea cf       	rjmp	.-44     	; 0xc94 <__ultoa_invert+0x58>
 cc0:	b4 e0       	ldi	r27, 0x04	; 4
 cc2:	a6 95       	lsr	r26
 cc4:	97 95       	ror	r25
 cc6:	87 95       	ror	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	ba 95       	dec	r27
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x86>
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	61 05       	cpc	r22, r1
 cd4:	71 05       	cpc	r23, r1
 cd6:	08 95       	ret
 cd8:	9b 01       	movw	r18, r22
 cda:	ac 01       	movw	r20, r24
 cdc:	0a 2e       	mov	r0, r26
 cde:	06 94       	lsr	r0
 ce0:	57 95       	ror	r21
 ce2:	47 95       	ror	r20
 ce4:	37 95       	ror	r19
 ce6:	27 95       	ror	r18
 ce8:	ba 95       	dec	r27
 cea:	c9 f7       	brne	.-14     	; 0xcde <__ultoa_invert+0xa2>
 cec:	62 0f       	add	r22, r18
 cee:	73 1f       	adc	r23, r19
 cf0:	84 1f       	adc	r24, r20
 cf2:	95 1f       	adc	r25, r21
 cf4:	a0 1d       	adc	r26, r0
 cf6:	08 95       	ret

00000cf8 <__prologue_saves__>:
 cf8:	2f 92       	push	r2
 cfa:	3f 92       	push	r3
 cfc:	4f 92       	push	r4
 cfe:	5f 92       	push	r5
 d00:	6f 92       	push	r6
 d02:	7f 92       	push	r7
 d04:	8f 92       	push	r8
 d06:	9f 92       	push	r9
 d08:	af 92       	push	r10
 d0a:	bf 92       	push	r11
 d0c:	cf 92       	push	r12
 d0e:	df 92       	push	r13
 d10:	ef 92       	push	r14
 d12:	ff 92       	push	r15
 d14:	0f 93       	push	r16
 d16:	1f 93       	push	r17
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	cd b7       	in	r28, 0x3d	; 61
 d1e:	de b7       	in	r29, 0x3e	; 62
 d20:	ca 1b       	sub	r28, r26
 d22:	db 0b       	sbc	r29, r27
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	f8 94       	cli
 d28:	de bf       	out	0x3e, r29	; 62
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	cd bf       	out	0x3d, r28	; 61
 d2e:	09 94       	ijmp

00000d30 <__epilogue_restores__>:
 d30:	2a 88       	ldd	r2, Y+18	; 0x12
 d32:	39 88       	ldd	r3, Y+17	; 0x11
 d34:	48 88       	ldd	r4, Y+16	; 0x10
 d36:	5f 84       	ldd	r5, Y+15	; 0x0f
 d38:	6e 84       	ldd	r6, Y+14	; 0x0e
 d3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d40:	aa 84       	ldd	r10, Y+10	; 0x0a
 d42:	b9 84       	ldd	r11, Y+9	; 0x09
 d44:	c8 84       	ldd	r12, Y+8	; 0x08
 d46:	df 80       	ldd	r13, Y+7	; 0x07
 d48:	ee 80       	ldd	r14, Y+6	; 0x06
 d4a:	fd 80       	ldd	r15, Y+5	; 0x05
 d4c:	0c 81       	ldd	r16, Y+4	; 0x04
 d4e:	1b 81       	ldd	r17, Y+3	; 0x03
 d50:	aa 81       	ldd	r26, Y+2	; 0x02
 d52:	b9 81       	ldd	r27, Y+1	; 0x01
 d54:	ce 0f       	add	r28, r30
 d56:	d1 1d       	adc	r29, r1
 d58:	0f b6       	in	r0, 0x3f	; 63
 d5a:	f8 94       	cli
 d5c:	de bf       	out	0x3e, r29	; 62
 d5e:	0f be       	out	0x3f, r0	; 63
 d60:	cd bf       	out	0x3d, r28	; 61
 d62:	ed 01       	movw	r28, r26
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
